{"version":3,"sources":["components/Form/input.svg","components/Form/Form.js","App.js","index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","d","_ref3","points","_ref4","x1","y1","x2","y2","_ref","svgRef","title","props","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","className","ref","ForwardRef","forwardRef","Form","state","isFormValid","formControls","firstName","value","type","label","errorMessage","valid","touched","validation","required","or","lastName","email","typeMessage","message","minLength","image","size","accept","maxSize","submitHandler","event","preventDefault","formData","forEach","control","console","group","log","groupEnd","alert","JSON","stringify","fetch","method","body","headers","Accept","then","response","json","data","validateHandler","controlName","validateControl","every","name","setState","changeHandler","changeAndValidateChangeHandler","fileHandler","isValid","trim","test","String","toLowerCase","includes","maxSizeB","validateForm","files","onSubmit","htmlFor","id","placeholder","onBlur","onChange","disabled","icon","faAngleDown","style","color","rows","resize","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3d8f14f.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"polyline\", {\n  points: \"17 8 12 3 7 8\"\n});\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"line\", {\n  x1: 12,\n  y1: 3,\n  x2: 12,\n  y2: 15\n});\n\nvar SvgInput = function SvgInput(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    className: \"feather feather-upload\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3, _ref4);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgInput, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/input.0c617a97.svg\";\nexport { ForwardRef as ReactComponent };","import React, { Component } from \"react\";\nimport \"./Form.css\";\nimport { ReactComponent as InputSvg } from \"./input.svg\";\n\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction validateEmail(email) {\n  const reg = /^[-\\w.]+@([A-z0-9][-A-z0-9]+\\.)+[A-z]{2,4}$/;\n  return reg.test(String(email).toLowerCase());\n}\n\nclass Form extends Component {\n  state = {\n    isFormValid: false,\n    /* typeMessageOptions: [\"Предложение\", \"Обращение\", \"Отзыв\"], */\n    formControls: {\n      firstName: {\n        value: \"\",\n        type: \"text\",\n        label: \"Имя\",\n        errorMessage: \"Введите имя или фамилию\",\n        valid: false,\n        touched: false,\n        validation: {\n          required: false,\n          or: [\"lastName\"],\n        },\n      },\n      lastName: {\n        value: \"\",\n        type: \"text\",\n        label: \"Фамилия\",\n        errorMessage: \"Введите имя или фамилию\",\n        valid: false,\n        touched: false,\n        validation: {\n          required: false,\n          or: [\"firstName\"],\n        },\n      },\n      email: {\n        value: \"test@test.test\",\n        type: \"email\",\n        label: \"Email\",\n        errorMessage: \"Введите корректный email\",\n        valid: false,\n        touched: false,\n        validation: {\n          required: true,\n          email: true,\n        },\n      },\n      typeMessage: {\n        value: \"\",\n        type: \"select\",\n        label: \"Тип сообщения\",\n        errorMessage: \"Выберите категорию сообщения\",\n        valid: false,\n        touched: false,\n        validation: {\n          required: true,\n        },\n      },\n      message: {\n        value: \"\",\n        type: \"text\",\n        label: \"Сообщение\",\n        errorMessage: \"Сообщение должно содержать не менее 10 символов\",\n        valid: false,\n        touched: false,\n        validation: {\n          required: true,\n          minLength: 10,\n        },\n      },\n      image: {\n        value: \"\",\n        type: \"file\",\n        label: \"Картинка\",\n        errorMessage: \"Загрузите файл с JPG или PNG размером до 2Мб\",\n        valid: false,\n        touched: false,\n        size: 0,\n        validation: {\n          required: true,\n          accept: [\"image/jpg\", \"image/jpeg\", \"image/png\"],\n          maxSize: 2,\n        },\n      },\n    },\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    const { formControls } = this.state;\n    let formData = {};\n    Object.keys(formControls).forEach((control) => {\n      const value = formControls[control].value;\n      formData[control] = value;\n    });\n    console.group(\"Request data:\");\n    console.log(formData);\n    console.groupEnd();\n\n    alert(JSON.stringify(formData, null, \" \"));\n\n    fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.group(\"Response:\");\n        console.log(data);\n        console.groupEnd();\n      });\n  };\n\n  validateControl(value, validation) {\n    if (!validation) {\n      return true;\n    } else {\n      let isValid = true;\n      if (validation.required) {\n        if (value === null) {\n          isValid = false;\n        } else {\n          if (typeof value === \"string\") {\n            isValid = value.trim() !== \"\";\n          }\n        }\n      }\n      if (value && validation.minLength) {\n        isValid = value.length >= validation.minLength && isValid;\n      }\n      if (value && validation.email) {\n        isValid = validateEmail(value) && isValid;\n      }\n      if (value && validation.accept) {\n        isValid = validation.accept.includes(value.type) && isValid;\n      }\n      if (value && validation.maxSize) {\n        const maxSizeB = validation.maxSize * 1024 * 1024;\n        isValid = value.size <= maxSizeB && isValid;\n      }\n\n      /*  if (!value && validation.or && validation.or.length > 0) {\n        console.log(value, validation);\n        const formControls = { ...this.state.formControls };\n        for (let name of validation.or) {\n          const control = formControls[name];\n          console.log(name, control.value, control.valid, isValid);\n          isValid = control.value && control.valid && isValid;\n          console.log(name, control.value, control.valid, isValid);\n          if (isValid) break;\n        } */\n      /* Object.keys(formControls).forEach((name) => {\n          const control = formControls[name];\n          isValid = control.value && control.valid && isValid;\n          if (isValid) return;\n        }); */\n      //}\n      return isValid;\n    }\n  }\n\n  validateHandler = (controlName) => {\n    const formControls = {\n      ...this.state.formControls,\n    };\n    let control = {\n      ...formControls[controlName],\n      touched: true,\n    };\n    control.valid = this.validateControl(control.value, control.validation);\n    formControls[controlName] = control;\n    /* let isFormValid = true; */\n    /*Object.keys(formControls).forEach((name) => {\n      isFormValid = formControls[name].valid & isFormValid;\n    }); */\n    let isFormValid = Object.keys(formControls).every(\n      (name) => formControls[name].valid\n    );\n    /* console.group(\"isFormValid\");\n    console.log(\"isFormValid:\", isFormValid);\n    console.log(\n      'formControls[\"firstName\"].value:',\n      formControls[\"firstName\"].value\n    );\n    console.log(\n      'formControls[\"firstName\"].valid:',\n      formControls[\"firstName\"].valid\n    );\n    console.log(\n      'formControls[\"lastName\"].value:',\n      formControls[\"lastName\"].value\n    );\n    console.log(\n      'formControls[\"lastName\"].valid:',\n      formControls[\"lastName\"].valid\n    );\n    console.log(\n      \"firstName\",\n      !!formControls[\"firstName\"].value & formControls[\"firstName\"].valid\n    );\n    console.log(\n      \"lastName\",\n      !!formControls[\"lastName\"].value & formControls[\"lastName\"].valid\n    );\n    console.log(\n      !!formControls[\"firstName\"].value & formControls[\"firstName\"].valid ||\n        !!formControls[\"lastName\"].value & formControls[\"lastName\"].valid\n    );\n    console.groupEnd(); */\n    if (\n      !(\n        !!formControls[\"firstName\"].value & formControls[\"firstName\"].valid ||\n        !!formControls[\"lastName\"].value & formControls[\"lastName\"].valid\n      )\n    ) {\n      isFormValid = false;\n      if (controlName === \"firstName\" || controlName === \"lastName\") {\n        let control = {\n          ...formControls[controlName],\n        };\n        control.valid = false;\n        formControls[controlName] = control;\n      }\n    } else {\n      switch (controlName) {\n        case \"firstName\": {\n          let lastName = {\n            ...formControls[\"lastName\"],\n          };\n          lastName.valid = this.validateControl(\n            lastName.value,\n            lastName.validation\n          );\n          formControls[\"lastName\"] = lastName;\n          break;\n        }\n        case \"lastName\": {\n          let firstName = {\n            ...formControls[\"firstName\"],\n          };\n          firstName.valid = this.validateControl(\n            firstName.value,\n            firstName.validation\n          );\n          formControls[\"firstName\"] = firstName;\n          break;\n        }\n        default:\n          break;\n      }\n    }\n    this.setState({\n      formControls,\n      isFormValid,\n    });\n  };\n\n  componentWillMount() {\n    this.validateForm();\n  }\n\n  validateForm() {\n    const formControls = {\n      ...this.state.formControls,\n    };\n    let isFormValid = true;\n    Object.keys(formControls).forEach((name) => {\n      const control = formControls[name];\n      control.valid = this.validateControl(control.value, control.validation);\n      isFormValid = control.valid & isFormValid;\n      formControls[name] = control;\n    });\n    this.setState({\n      formControls,\n      isFormValid,\n    });\n  }\n\n  changeHandler = (event, controlName) => {\n    const formControls = {\n      ...this.state.formControls,\n    };\n    formControls[controlName].value = event.target.value;\n    this.setState({\n      formControls,\n    });\n    if (formControls[controlName].touched) {\n      this.validateHandler(controlName);\n    }\n  };\n\n  fileHandler(event, control) {\n    if (event.target.files.length > 0) {\n      control.value = event.target.files[0];\n      control.size = event.target.files[0].size;\n    } else {\n      control.size = 0;\n      control.value = null;\n    }\n    return control;\n  }\n\n  changeAndValidateChangeHandler = (event, controlName) => {\n    const formControls = {\n      ...this.state.formControls,\n    };\n    let control = {\n      ...formControls[controlName],\n      touched: true,\n    };\n    if (event.target.type === \"file\") {\n      control = this.fileHandler(event, control);\n      console.log(\"image.value : \", control.value);\n    } else {\n      control.value = event.target.value;\n    }\n    control.valid = this.validateControl(control.value, control.validation);\n    formControls[controlName] = control;\n    /* let isFormValid = true; */\n    /*Object.keys(formControls).forEach((name) => {\n      isFormValid = formControls[name].valid & isFormValid;\n    }); */\n    let isFormValid = Object.keys(formControls).every(\n      (name) => formControls[name].valid\n    );\n\n    /* console.group(\"isFormValid\");\n    console.log(\"isFormValid:\", isFormValid);\n    console.log(\n      'formControls[\"firstName\"].value:',\n      formControls[\"firstName\"].value\n    );\n    console.log(\n      'formControls[\"firstName\"].valid:',\n      formControls[\"firstName\"].valid\n    );\n    console.log(\n      'formControls[\"lastName\"].value:',\n      formControls[\"lastName\"].value\n    );\n    console.log(\n      'formControls[\"lastName\"].valid:',\n      formControls[\"lastName\"].valid\n    );\n    console.log(\n      \"firstName\",\n      !!formControls[\"firstName\"].value & formControls[\"firstName\"].valid\n    );\n    console.log(\n      \"lastName\",\n      !!formControls[\"lastName\"].value & formControls[\"lastName\"].valid\n    );\n    console.log(\n      !!formControls[\"firstName\"].value & formControls[\"firstName\"].valid ||\n        !!formControls[\"lastName\"].value & formControls[\"lastName\"].valid\n    );\n    console.groupEnd(); */\n    if (\n      !(\n        !!formControls[\"firstName\"].value & formControls[\"firstName\"].valid ||\n        !!formControls[\"lastName\"].value & formControls[\"lastName\"].valid\n      )\n    ) {\n      isFormValid = false;\n    }\n    this.setState({\n      formControls,\n      isFormValid,\n    });\n  };\n\n  render() {\n    const firstName = this.state.formControls[\"firstName\"];\n    const lastName = this.state.formControls[\"lastName\"];\n    const email = this.state.formControls[\"email\"];\n    const typeMessage = this.state.formControls[\"typeMessage\"];\n    const message = this.state.formControls[\"message\"];\n    const image = this.state.formControls[\"image\"];\n\n    return (\n      <form className=\"form\" onSubmit={this.submitHandler}>\n        <ul className=\"form__list\">\n          <li className=\"form__item\">\n            <label htmlFor=\"first-name\" className=\"form__item-label\">\n              Имя\n            </label>\n            <div className=\"form__item-field\">\n              <input\n                type=\"text\"\n                id=\"first-name\"\n                className=\"form__item-field-input\"\n                placeholder=\"Введите имя\"\n                value={firstName.value}\n                onBlur={() => {\n                  this.validateHandler(\"firstName\");\n                }}\n                onChange={(event) => {\n                  this.changeHandler(event, \"firstName\");\n                }}\n              ></input>\n              {firstName.validation &&\n                firstName.touched &&\n                !firstName.valid && (\n                  <div className=\"form__item-field-error\">\n                    {firstName.errorMessage}\n                  </div>\n                )}\n            </div>\n          </li>\n          <li className=\"form__item\">\n            <label htmlFor=\"last-name\" className=\"form__item-label\">\n              Фамилия\n            </label>\n            <div className=\"form__item-field\">\n              <input\n                type=\"text\"\n                className=\"form__item-field-input\"\n                id=\"last-name\"\n                placeholder=\"Введите фамилию\"\n                value={lastName.value}\n                onBlur={() => {\n                  this.validateHandler(\"lastName\");\n                }}\n                onChange={(event) => {\n                  this.changeHandler(event, \"lastName\");\n                }}\n              ></input>\n              {lastName.validation && lastName.touched && !lastName.valid && (\n                <div className=\"form__item-field-error\">\n                  {lastName.errorMessage}\n                </div>\n              )}\n            </div>\n          </li>\n          <li className=\"form__item\">\n            <label htmlFor=\"email\" className=\"form__item-label\">\n              Email\n            </label>\n            <div className=\"form__item-field\">\n              <input\n                type=\"email\"\n                className=\"form__item-field-input\"\n                id=\"email\"\n                placeholder=\"Введите email\"\n                value={email.value}\n                onBlur={() => {\n                  this.validateHandler(\"email\");\n                }}\n                onChange={(event) => {\n                  this.changeHandler(event, \"email\");\n                }}\n              ></input>\n              {email.validation && email.touched && !email.valid && (\n                <div className=\"form__item-field-error\">\n                  {email.errorMessage}\n                </div>\n              )}\n            </div>\n          </li>\n          <li className=\"form__item\">\n            <label htmlFor=\"type-message\" className=\"form__item-label\">\n              Категория сообщения\n            </label>\n            <div className=\"form__item-field icon\">\n              <select\n                id=\"type-message\"\n                className=\"form__item-field-input form__select\"\n                value={typeMessage.value}\n                onChange={(event) => {\n                  this.changeAndValidateChangeHandler(event, \"typeMessage\");\n                }}\n                /* options={this.state.typeMessageOptions} */\n              >\n                <option value=\"\" disabled>\n                  Выберите категорию сообщения\n                </option>\n                <option value=\"suggestion\"> Предложение </option>\n                <option value=\"appeal\"> Обращение </option>\n                <option value=\"review\"> Отзыв </option>\n              </select>\n\n              {typeMessage.validation &&\n                typeMessage.touched &&\n                !typeMessage.valid && (\n                  <div className=\"form__item-field-error\">\n                    {typeMessage.errorMessage}\n                  </div>\n                )}\n            </div>\n            <FontAwesomeIcon\n              icon={faAngleDown}\n              style={{ color: \"#000\" }}\n              className=\"select-icon\"\n            />\n          </li>\n          <li className=\"form__item\">\n            <label htmlFor=\"message\" className=\"form__item-label\">\n              Сообщение\n            </label>\n            <div className=\"form__item-field\">\n              <textarea\n                rows=\"5\"\n                className=\"form__item-field-input\"\n                id=\"message\"\n                placeholder=\"Введите сообщение\"\n                style={{\n                  resize: \"none\",\n                }}\n                value={message.value}\n                onBlur={() => {\n                  this.validateHandler(\"message\");\n                }}\n                onChange={(event) => {\n                  this.changeHandler(event, \"message\");\n                }}\n              ></textarea>\n              {message.validation && message.touched && !message.valid && (\n                <div className=\"form__item-field-error\">\n                  {message.errorMessage}\n                </div>\n              )}\n            </div>\n          </li>\n          <li className=\"form__item\">\n            <label htmlFor=\"image\" className=\"form__item-label\">\n              {image.label}\n            </label>\n            <div className=\"form__item-field\">\n              <input\n                type={image.type}\n                id=\"image\"\n                className=\"input-file\"\n                accept={image.validation.accept}\n                onChange={(event) => {\n                  this.changeAndValidateChangeHandler(event, \"image\");\n                }}\n              />\n              <label htmlFor=\"image\" className=\"input-label\">\n                <span className=\"name-file\">\n                  {image.value ? image.value.name : \"Файл не выбран\"}\n                </span>\n                <span className=\"btn-upload  btn--blue\">\n                  <InputSvg className=\"input-svg\" />\n                  <span className=\"btn-text\">Выберите файл</span>\n                </span>\n              </label>\n\n              {image.validation && image.touched && !image.valid && (\n                <div className=\"form__item-field-error\">\n                  {image.errorMessage}\n                </div>\n              )}\n            </div>\n          </li>\n\n          {/*  <li className=\"form__item\">\n            <input type=\"file\" name=\"file\" id=\"file\" className=\"inputfile\" />\n            <label htmlFor=\"file\" className=\"btn btn--blue\">\n              Выберите файл\n            </label>\n          </li> */}\n\n          <li className=\"form__item\">\n            <button\n              type=\"submit\"\n              className=\"btn btn--blue\"\n              disabled={!this.state.isFormValid}\n            >\n              Отправить\n            </button>\n          </li>\n        </ul>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form/Form\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"header\">Форма обратной связи</div>\n      <div className=\"container\">\n        <Form />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}